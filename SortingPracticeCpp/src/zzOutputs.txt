Sorting Performance In C++ built on Sep  2 2025 at 12:38:36
testBlockSort()
previous guess -1, trying guess [ 3] =  6 is NOT smaller than -1 next guess =  1
previous guess -1, trying guess [ 1] =  2 is NOT smaller than -1 next guess =  0
previous guess -1, trying guess [ 0] =  0 is NOT smaller than -1 returning -1

NO VALUES less than -1 found in array which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 0 next guess =  1
previous guess -1, trying guess [ 1] =  2 is NOT smaller than 0 next guess =  0
previous guess -1, trying guess [ 0] =  0 is NOT smaller than 0 returning -1

NO VALUES less than  0 found in array which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 1 next guess =  1
previous guess -1, trying guess [ 1] =  2 is NOT smaller than 1 next guess =  0
previous guess -1, trying guess [ 0] =  0 is     smaller than 1 returning 0

Element [0] =  0 is less than  1 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 2 next guess =  1
previous guess -1, trying guess [ 1] =  2 is NOT smaller than 2 next guess =  0
previous guess -1, trying guess [ 0] =  0 is     smaller than 2 returning 0

Element [0] =  0 is less than  2 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 3 next guess =  1
previous guess -1, trying guess [ 1] =  2 is     smaller than 3 next guess =  2
previous guess  1, trying guess [ 2] =  4 is NOT smaller than 3 returning 1

Element [1] =  2 is less than  3 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 4 next guess =  1
previous guess -1, trying guess [ 1] =  2 is     smaller than 4 next guess =  2
previous guess  1, trying guess [ 2] =  4 is NOT smaller than 4 returning 1

Element [1] =  2 is less than  4 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 5 next guess =  1
previous guess -1, trying guess [ 1] =  2 is     smaller than 5 next guess =  2
previous guess  1, trying guess [ 2] =  4 is     smaller than 5 returning 2

Element [2] =  4 is less than  5 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is NOT smaller than 6 next guess =  1
previous guess -1, trying guess [ 1] =  2 is     smaller than 6 next guess =  2
previous guess  1, trying guess [ 2] =  4 is     smaller than 6 returning 2

Element [2] =  4 is less than  6 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 7 next guess =  6
previous guess  3, trying guess [ 6] = 12 is NOT smaller than 7 next guess =  5
previous guess  3, trying guess [ 5] = 10 is NOT smaller than 7 next guess =  4
previous guess  3, trying guess [ 4] =  8 is NOT smaller than 7 returning 3

Element [3] =  6 is less than  7 which took  4 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 8 next guess =  6
previous guess  3, trying guess [ 6] = 12 is NOT smaller than 8 next guess =  5
previous guess  3, trying guess [ 5] = 10 is NOT smaller than 8 next guess =  4
previous guess  3, trying guess [ 4] =  8 is NOT smaller than 8 returning 3

Element [3] =  6 is less than  8 which took  4 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 9 next guess =  6
previous guess  3, trying guess [ 6] = 12 is NOT smaller than 9 next guess =  5
previous guess  3, trying guess [ 5] = 10 is NOT smaller than 9 next guess =  4
previous guess  3, trying guess [ 4] =  8 is     smaller than 9 returning 4

Element [4] =  8 is less than  9 which took  4 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 10 next guess =  6
previous guess  3, trying guess [ 6] = 12 is NOT smaller than 10 next guess =  5
previous guess  3, trying guess [ 5] = 10 is NOT smaller than 10 next guess =  4
previous guess  3, trying guess [ 4] =  8 is     smaller than 10 returning 4

Element [4] =  8 is less than 10 which took  4 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 11 next guess =  6
previous guess  3, trying guess [ 6] = 12 is NOT smaller than 11 next guess =  5
previous guess  3, trying guess [ 5] = 10 is     smaller than 11 returning 5

Element [5] = 10 is less than 11 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 12 next guess =  6
previous guess  3, trying guess [ 6] = 12 is NOT smaller than 12 next guess =  5
previous guess  3, trying guess [ 5] = 10 is     smaller than 12 returning 5

Element [5] = 10 is less than 12 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 13 next guess =  6
previous guess  3, trying guess [ 6] = 12 is     smaller than 13 next guess =  7
previous guess  6, trying guess [ 7] = 14 is NOT smaller than 13 returning 6

Element [6] = 12 is less than 13 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 14 next guess =  6
previous guess  3, trying guess [ 6] = 12 is     smaller than 14 next guess =  7
previous guess  6, trying guess [ 7] = 14 is NOT smaller than 14 returning 6

Element [6] = 12 is less than 14 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 15 next guess =  6
previous guess  3, trying guess [ 6] = 12 is     smaller than 15 next guess =  7
previous guess  6, trying guess [ 7] = 14 is     smaller than 15 returning 7

Element [7] = 14 is less than 15 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 16 next guess =  6
previous guess  3, trying guess [ 6] = 12 is     smaller than 16 next guess =  7
previous guess  6, trying guess [ 7] = 14 is     smaller than 16 returning 7

Element [7] = 14 is less than 16 which took  3 compares

previous guess -1, trying guess [ 3] =  6 is     smaller than 17 next guess =  6
previous guess  3, trying guess [ 6] = 12 is     smaller than 17 next guess =  7
previous guess  6, trying guess [ 7] = 14 is     smaller than 17 returning 7

Element [7] = 14 is less than 17 which took  3 compares

PASS:  function testBlockSortBinaryTagSearch() returns TRUE
testBlockSort() ran 1 successful tests
