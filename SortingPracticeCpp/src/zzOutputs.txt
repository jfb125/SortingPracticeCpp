Sorting Performance In C++ built on Sep 20 2025 at 16:27:52
testBlockSort()

Testing binaryFirst() with an array with a 6 unique elements
  0   1   2   3   4   5   6
  0   1   2   3   4   5   6 insert -1 before 0
  0   1   2   3   4   5   6 insert  0 before 0
  0   1   2   3   4   5   6 insert  1 before 1
  0   1   2   3   4   5   6 insert  2 before 2
  0   1   2   3   4   5   6 insert  3 before 3
  0   1   2   3   4   5   6 insert  4 before 4
  0   1   2   3   4   5   6 insert  5 before 5
  0   1   2   3   4   5   6 insert  6 before 6
  0   1   2   3   4   5   6 insert  7 before 7

Testing binaryFirst() with an array with a 7 unique elements
  0   1   2   3   4   5   6   7
  0   1   2   3   4   5   6   7 insert -1 before 0
  0   1   2   3   4   5   6   7 insert  0 before 0
  0   1   2   3   4   5   6   7 insert  1 before 1
  0   1   2   3   4   5   6   7 insert  2 before 2
  0   1   2   3   4   5   6   7 insert  3 before 3
  0   1   2   3   4   5   6   7 insert  4 before 4
  0   1   2   3   4   5   6   7 insert  5 before 5
  0   1   2   3   4   5   6   7 insert  6 before 6
  0   1   2   3   4   5   6   7 insert  7 before 7
  0   1   2   3   4   5   6   7 insert  8 before 8

Testing binaryFirst() with an array with an odd number of unique elements with each repeated 3
  0   1   2   3   4   5   6   7   8   9  10
  0   0   0   1   1   1   2   2   2   3   3 insert -1 before 0
  0   0   0   1   1   1   2   2   2   3   3 insert  0 before 0
  0   0   0   1   1   1   2   2   2   3   3 insert  1 before 3
  0   0   0   1   1   1   2   2   2   3   3 insert  2 before 6
  0   0   0   1   1   1   2   2   2   3   3 insert  3 before 9
  0   0   0   1   1   1   2   2   2   3   3 insert  4 before 11

Testing binaryFirst() with an array with an even number of unique elements with each repeated 3
  0   1   2   3   4   5   6   7   8   9  10  11
  0   0   0   1   1   1   2   2   2   3   3   3 insert -1 before 0
  0   0   0   1   1   1   2   2   2   3   3   3 insert  0 before 0
  0   0   0   1   1   1   2   2   2   3   3   3 insert  1 before 3
  0   0   0   1   1   1   2   2   2   3   3   3 insert  2 before 6
  0   0   0   1   1   1   2   2   2   3   3   3 insert  3 before 9
  0   0   0   1   1   1   2   2   2   3   3   3 insert  4 before 12
PASS:  function testBlockSortBinaryFirst() returns TRUE

Testing binaryLast() with an array with 6 unique elements
  0   1   2   3   4   5   6
  0   1   2   3   4   5   6 insert -1 before 0
  0   1   2   3   4   5   6 insert  0 before 1
  0   1   2   3   4   5   6 insert  1 before 2
  0   1   2   3   4   5   6 insert  2 before 3
  0   1   2   3   4   5   6 insert  3 before 4
  0   1   2   3   4   5   6 insert  4 before 5
  0   1   2   3   4   5   6 insert  5 before 6
  0   1   2   3   4   5   6 insert  6 before 7
  0   1   2   3   4   5   6 insert  7 before 7

Testing binaryLast() with an array with 7 unique elements
  0   1   2   3   4   5   6   7
  0   1   2   3   4   5   6   7 insert -1 before 0
  0   1   2   3   4   5   6   7 insert  0 before 1
  0   1   2   3   4   5   6   7 insert  1 before 2
  0   1   2   3   4   5   6   7 insert  2 before 3
  0   1   2   3   4   5   6   7 insert  3 before 4
  0   1   2   3   4   5   6   7 insert  4 before 5
  0   1   2   3   4   5   6   7 insert  5 before 6
  0   1   2   3   4   5   6   7 insert  6 before 7
  0   1   2   3   4   5   6   7 insert  7 before 8
  0   1   2   3   4   5   6   7 insert  8 before 8

Testing binaryLast() with an array with an odd elements each repeated 3
  0   1   2   3   4   5   6   7   8   9  10
  0   0   0   1   1   1   2   2   2   3   3 insert -1 before 0
  0   0   0   1   1   1   2   2   2   3   3 insert  0 before 3
  0   0   0   1   1   1   2   2   2   3   3 insert  1 before 6
  0   0   0   1   1   1   2   2   2   3   3 insert  2 before 9
  0   0   0   1   1   1   2   2   2   3   3 insert  3 before 11
  0   0   0   1   1   1   2   2   2   3   3 insert  4 before 11

Testing binaryLast() with an array with an even elements each repeated 3
  0   1   2   3   4   5   6   7   8   9  10  11
  0   0   0   1   1   1   2   2   2   3   3   3 insert -1 before 0
  0   0   0   1   1   1   2   2   2   3   3   3 insert  0 before 3
  0   0   0   1   1   1   2   2   2   3   3   3 insert  1 before 6
  0   0   0   1   1   1   2   2   2   3   3   3 insert  2 before 9
  0   0   0   1   1   1   2   2   2   3   3   3 insert  3 before 12
  0   0   0   1   1   1   2   2   2   3   3   3 insert  4 before 12
PASS:  function testBlockSortBinaryLast() returns TRUE
testBlockSort() ran 2 successful tests
