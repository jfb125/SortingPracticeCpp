Sorting Performance In C++ built on Oct 16 2025 at 17:01:29
testBlockSort
testBlockSortMergeBlocksExhaustively

Entering 'byAuxiliary'
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  0 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src =  8 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  1 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src =  9 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  1 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src =  9 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  2 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 10 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  2 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 10 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  3 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 11 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  3 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 11 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  4 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 12 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  4 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 12 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  5 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 13 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  5 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 13 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  6 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 14 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  6 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 14 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  7 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 15 aux:  bottom of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  7 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 15 aux:  top of loop
   A    B    C    D    E    F    G    I    H    J    K    L    M    N    O    P dst =  8 aux_src =  0 aux_dst =  0 b_2_st =  8 b_2_src = 16 aux:  bottom of loop
Exiting 'byAuxiliary'
    1  when divided into two subarrays, each sorted:    A    B    C    D    E    F    G    I |   H    J    K    L    M    N    O    P , final b value P is at  15
       merged using strategy AUXILLIARY  to             A    B    C    D    E    F    G    I |   H    J    K    L    M    N    O    P , final b value location 15 vs expected 15
 which took        8 compares and        0 assignments which is in ERROR
ERROR: function testBlockSortMergeBlocksExhaustively() returns FALSE
